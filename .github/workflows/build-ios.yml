name: Build and Sign iOS App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Install Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'

      # Install Flutter dependencies
      - name: Install Dependencies
        run: flutter pub get

      # Install CocoaPods dependencies
      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      # Decode and install the iOS certificate
      - name: Decode and install the iOS certificate
        run: |
          echo "$IOS_CERTIFICATE_P12" | base64 --decode > ios_certificate.p12
          security create-keychain -p "" build.keychain
          security import ios_certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -A
          security list-keychains -d user -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain
        env:
          IOS_CERTIFICATE_P12: ${{ secrets.IOS_CERTIFICATE_P12 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}

      # Decode and install the provisioning profile
      - name: Decode and install the provisioning profile
        run: |
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > /Users/runner/Library/MobileDevice/Provisioning\ Profiles/app.mobileprovision
        env:
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}

      # Build the iOS app without code signing (Flutter build step)
      - name: Build iOS app without code signing
        run: flutter build ios --release --no-codesign

      # Code sign the app using Xcode
      - name: Code sign and archive the iOS app
        run: |
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $PWD/build/Runner.xcarchive \
            archive \
            -allowProvisioningUpdates

      # Export the signed IPA
      - name: Export the signed IPA
        run: |
          xcodebuild \
            -exportArchive \
            -archivePath $PWD/build/Runner.xcarchive \
            -exportOptionsPlist ios/exportOptions.plist \
            -exportPath $PWD/build/Runner.ipa \
            -allowProvisioningUpdates

      # Upload the IPA as an artifact (optional, if you want to save the .ipa)
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Runner.ipa
          path: build/Runner.ipa
